@Library('test-shared-library') _

final String MODE_PR = 'MODE_PR'
final String MODE_MASTER = 'MODE_MASTER'
final String DEFAULT_NODE_LABEL = 'docker && !mr-0xc8'

def defineTestStages = null
def pipelineContext = null
String result = 'FAILURE'
def scmEnv = null

final boolean prJob = env.CHANGE_BRANCH != null && env.CHANGE_BRANCH != ''
def mode = null

try {
  ansiColor('xterm') {
    timestamps {

      if (prJob) {
        echo "********* USING PR PIPELINE CONFIGURATION *********"
        cancelPreviousBuilds()
        mode = MODE_PR
      } else {
        echo "********* USING MASTER PIPELINE CONFIGURATION *********"
        mode = MODE_MASTER
      }

      stage('Prepare and Build') {
        node(DEFAULT_NODE_LABEL) {
          dir('h2o-3') {
            // clear the folder
            deleteDir()
            // checkout H2O-3
            retry(3) {
              timeout(time: 1, unit: 'MINUTES') {
                echo "###### Checkout H2O-3 ######"
                scmEnv = checkout scm
              }
            }
          }

          def prepareH2O3 = load('h2o-3/scripts/jenkins/groovy/prepareH2O3.groovy')
          pipelineContext = prepareH2O3(scmEnv, mode, !prJob)

          pipelineContext.getBuildConfig().setJobProperties(this)

          // Load the defineTestStages script
          defineTestStages = load('h2o-3/scripts/jenkins/groovy/defineTestStages.groovy')
        }
      }
      defineTestStages(pipelineContext)
      result = 'SUCCESS'
    }
  }
} finally {
  if (!prJob && pipelineContext != null) {
    pipelineContext.getEmailer().sendEmail(this, result, pipelineContext.getBuildSummary().getSummaryHTML(this))
  }
}

def cancelPreviousBuilds() {
  echo "###### Cancelling all previous builds ######"
  def hi = Hudson.instance
  def pname = env.JOB_NAME.split('/')[0]

  hi.getItem(pname).getItem(env.JOB_BASE_NAME).getBuilds().each{ build ->
    def exec = build.getExecutor()

    if (build.number != currentBuild.number && exec != null) {
      exec.doStop()
      println("Aborted previous running build #${build.number}")
    }
  }
}