@Library('test-shared-library@0.0.1') _

import ai.h2o.ci.BuildResult

def DEFAULT_NODE_LABEL = 'docker && !mr-0xc8'

def defineTestStages = null
def pipelineContext = null
BuildResult result = BuildResult.FAILURE
def scmEnv = null

try {
  ansiColor('xterm') {
    timestamps {

      stage('Prepare and Build') {
        node(DEFAULT_NODE_LABEL) {
          dir('h2o-3') {
            // clear the folder
            deleteDir()
            // checkout H2O-3
            retry(3) {
              timeout(time: 1, unit: 'MINUTES') {
                echo "###### Checkout H2O-3 ######"
                scmEnv = checkout scm
              }
            }
          }

          def prepareH2O3 = load('h2o-3/scripts/jenkins/groovy/prepareH2O3.groovy')
          pipelineContext = prepareH2O3(scmEnv, 'MODE_HADOOP', true)
          pipelineContext.getBuildConfig().setIgnoreRerun(true)

          final String scheduleString = 'H 21 * * *'
          pipelineContext.getBuildConfig().setJobProperties(this, pipelineTriggers([cron(scheduleString)]))

          // Load the defineTestStages script
          defineTestStages = load('h2o-3/scripts/jenkins/groovy/defineTestStages.groovy')
        }
      }
      defineTestStages(pipelineContext)
      result = BuildResult.SUCCESS
    }
  }
} finally {
  if (pipelineContext != null) {
    final List<String> recipients = pipelineContext.getUtils().getRelevantRecipients(result)
    pipelineContext.getEmailer().sendEmail(this, result, pipelineContext.getBuildSummary().getSummaryHTML(this), recipients)
  }
}